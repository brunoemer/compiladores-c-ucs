ProgArduino -> 
	{ currentContext = GlobalContext } ListaProg { ProgArduino.cod = ListaProg.cod }

ListaProg ->
	ListaComandosGlobal { ListaProg.cod = ListaComandosGlobal.cod }
	
ListaComandosGlobal ->
	Declaracao | { ListaComandosGlobal.cod = Declaracao.cod }
	If | { ListaComandosGlobal.cod = If.cod }
	While | { ListaComandosGlobal.cod = While.cod }
	DoWhile | { ListaComandosGlobal.cod = DoWhile.cod }
	For | { ListaComandosGlobal.cod = For.cod }
	Atribuicao | { ListaComandosGlobal.cod = Atribuicao.cod }
	Funcao | { ListaComandosGlobal.cod = Funcao.cod }
	ListaComandosGlobal1 { ListaComandosGlobal.cod = ListaComandosGlobal1.cod }

ListaComandos ->
	DeclaraVar |
	{ If.LDesvioIni = ListaComandos.LDesvioIni; If.LDesvioFim = ListaComandos.LDesvioFim } If | { ListaComandos.cod = If.cod }
	While | { ListaComandos.cod = While.cod }
	DoWhile | { ListaComandos.cod = DoWhile.cod }
	For | { ListaComandos.cod = For.cod }
	Atribuicao | { ListaComandos.cod = Atribuicao.cod }
	{ ComandosLoopDesvio.LDesvioIni = ListaComandos.LDesvioIni; ComandosLoopDesvio.LDesvioFim = ListaComandos.LDesvioFim } ComandosLoopDesvio | { ListaComandos.cod = ComandosLoopDesvio.cod }
	Funcao | { ListaComandos.cod = Funcao.cod }
	{ ListaComandos1.LDesvioIni = ListaComandos.LDesvioIni; ListaComandos1.LDesvioFim = ListaComandos.LDesvioFim } ListaComandos1 { ListaComandos.cod = ListaComandos1.cod }

Declaracao -> 
	TipoVar id { DecB.tipo = TipoVar.tipo; DecB.idCod = id.cod; } DecB | { Declaracao.cod = DecB.cod }
	void id ( { TableSymbol.add(id.cod, id.tipo, StructureType.Function); currentContext = id.cod } DecC { Declaracao.cod = gen(id.cod, ":") || DecC.cod }
DecB -> 
	; { TableSymbol.add(DecB.idCod, DecB.tipo) } | 
	, { TableSymbol.add(DecB.idCod, DecB.tipo) } id { ListaVar.tipo = DecB.tipo; TableSymbol.add(id.cod, DecB.tipo) } ListaVar | 
	( { TableSymbol.add(DecB.idCod, DecB.tipo, StructureType.Function); currentContext = DecB.idCod } DecC { DecB.cod = gen(DecB.idCod, ":") || DecC.cod }
ListaVar -> 
	, id { ListaVar1.tipo = TipoVar.tipo; TableSymbol.add(id.cod, ListaVar.tipo, currentContext) } ListaVar1 |
	""
DeclaraVar ->
	TipoVar id { ListaVar.tipo = TipoVar.tipo; TableSymbol.add(id.cod, ListaVar.tipo, currentContext) } ListaVar;

DecC -> 
	ListaDecParm) {{ ListaComandos { Retorno.NumParam = ListaDecParm.NumParam } Retorno }} { currentContext = GlobalContext; 
		DecC.cod = ListaDecParm.cod || ListaComandos.cod || Retorno.cod }
Retorno -> 
	return ExpAtrib; | { Retorno.cod = ExpAtrib.cod || gen("return", ExpAtrib.place, ", ", Retorno.NumParam) }
	"" { Retorno.cod = "return"?? }
ListaDecParm -> 
	TipoVar id { paramTemp = criatemp(); TableSymbol.add(id.cod, TipoVar.tipo, currentContext, paramTemp); ListaDecParm.NumParam = 1;
		ListaDecParm.cod = gen(paramTemp, " = param[", ListaDecParmB.NumParam, "]"); ListaDecParmB.NumParam } ListaDecParmB | 
		{ ListaDecParm.cod += ListaDecParmB.cod; ListaDecParm.NumParam = ListaDecParmB.NumParamB }
	"" { ListaDecParm.cod = ""; ListaDecParm.NumParam = 0 }
ListaDecParmB -> 
	, TipoVar id { paramTemp = criatemp(); TableSymbol.add(id.cod, TipoVar.tipo, currentContext, paramTemp); ListaDecParmB.NumParam = ListaDecParmB.NumParam + 1;
		ListaDecParm.cod = gen(paramTemp, " = param[", ListaDecParmB.NumParam, "]"); ListaDecParmB1.NumParam = ListaDecParmB.NumParam } ListaDecParmB1 | { 
		ListaDecParmB.cod = ListaDecParmB1.cod || gen(paramTemp, " = param[", ListaDecParmB1.NumParam, "]");
		ListaDecParmB.NumParamB = ListaDecParmB1.NumParamB }
	"" { ListaDecParmB.cod = ""; ListaDecParmB.NumParam = ListaDecParmB.NumParamB }

TipoVar ->
	int | { TipoVar.tipo = "int" }
	long | { TipoVar.tipo = "long" }
	float | { TipoVar.tipo = "float" }
	bool { TipoVar.tipo = "bool" }
	
Funcao ->
	id ( { TableSymbol.ExistsFunction(id.cod) } ListaParam ); { Funcao.cod = ListaParam.cod || gen("call", id.cod) }
ListaParam -> 
	ExpAtrib ListaParamRec | { ListaParam.cod = ExpAtrib.cod || gen("Param", ExpAtrib.place) || ListaParamRec.ocfidl }
	"" { ListaParam.cod = "" }
ListaParamRec -> 
	, ExpAtrib ListaParamRec1 | { ListaParamRec.cod = ExpAtrib.cod || gen("Param", ExpAtrib.place) || ListaParamRec1.cod }
	"" { ListaParamRec.cod = "" }
	
Atribuicao -> 
	id { TableSymbol.ExistsVar(id.cod); AtribOp.id = TableSymbol.getId(id.cod, currentContext) } AtribOp { Atribuicao.cod = AtribOp.cod }
AtribOp ->
	= ExpAtrib  | { AtribOp.cod = ExpAtrib.cod || gen(=, AtribOp.id, ExpAtrib.place) }
	+= ExpAtrib | { AtribOp.place = criatemp(); AtribOp.cod = ExpAtrib.cod || 
				gen(+, AtribOp.place, AtribOp.id, ExpAtrib.place) || gen(=, AtribOp.id, AtribOp.place) }
	-= ExpAtrib | { AtribOp.place = criatemp(); AtribOp.cod = ExpAtrib.cod || 
				gen(-, AtribOp.place, AtribOp.id, ExpAtrib.place) || gen(=, AtribOp.id, AtribOp.place) }
	*= ExpAtrib | { AtribOp.place = criatemp(); AtribOp.cod = ExpAtrib.cod || 
				gen(*, AtribOp.place, AtribOp.id, ExpAtrib.place) || gen(=, AtribOp.id, AtribOp.place) }
	/= ExpAtrib   { AtribOp.place = criatemp(); AtribOp.cod = ExpAtrib.cod || 
				gen(/, AtribOp.place, AtribOp.id, ExpAtrib.place) || gen(=, AtribOp.id, AtribOp.place) }

ExpAtrib -> T { R.hc = T.cod; R.hp = T.place; R.ht = T.tipo } R { ExpAtrib.cod = R.sc; ExpAtrib.place = R.sp; ExpAtrib.tipo = R.st }
R -> || T { R1.hp = criatemp(); R1.hc = R.hc || T.cod || gen(||, R1.hp, R.hp, T.place);
			R1.ht = TableSymbol.CalcType(||, R.ht, T.tipo) } R1 { R.sp = R1.sp; R.sc = R1.sc; R.st = R1.st }
R -> Ɛ { R.sp = R.hp; R.sc = R.hc; R.st = R.ht }

T -> F { U.hc = F.cod; U.hp = F.place; U.ht = F.tipo } U { T.cod = U.sc; T.place = U.sp; T.tipo = U.st }
U -> && F { U1.hp = criatemp(); U1.hc = U.hc || F.cod || gen(&&, U1.hp, U.hp, F.place);
			U1.ht = TableSymbol.CalcType(&&, U.ht, F.tipo) } U1 { U.sp = U1.sp; U.sc = U1.sc; U.st = U1.st }
U -> Ɛ { U.sp = U.hp; U.sc = U.hc; U.st = U.ht }

F -> G { F.cod = G.cod; F.place = G.place; F.tipo = G.tipo }
G -> !G1 { G.place = criatemp(); G.cod = G1.cod || gen(!, G.place, G1.place); G.tipo = G1.tipo }

G -> H { V.hc = H.cod; V.hp = H.place; V.ht = H.tipo } V { G.cod = V.sc; G.place = V.sp; G.tipo = V.st }
V -> > H { V1.hp = criatemp(); V1.hc = V.hc || H.cod || gen(>, V1.hp, V.hp, H.place);
			V1.ht = TableSymbol.CalcType(>, V.ht, H.tipo) } V1 { V.sp = V1.sp; V.sc = V1.sc; V.st = V1.st }
V -> == H { V1.hp = criatemp(); V1.hc = V.hc || H.cod || gen(==, V1.hp, V.hp, H.place);
			V1.ht = TableSymbol.CalcType(==, V.ht, H.tipo) } V1 { V.sp = V1.sp; V.sc = V1.sc; V.st = V1.st }
V -> < H { V1.hp = criatemp(); V1.hc = V.hc || H.cod || gen(<, V1.hp, V.hp, H.place);
			V1.ht = TableSymbol.CalcType(<, V.ht, H.tipo) } V1 { V.sp = V1.sp; V.sc = V1.sc; V.st = V1.st }
V -> >= H { V1.hp = criatemp(); V1.hc = V.hc || H.cod || gen(>=, V1.hp, V.hp, H.place);
			V1.ht = TableSymbol.CalcType(>=, V.ht, H.tipo) } V1 { V.sp = V1.sp; V.sc = V1.sc; V.st = V1.st }
V -> != H { V1.hp = criatemp(); V1.hc = V.hc || H.cod || gen(!=, V1.hp, V.hp, H.place);
			V1.ht = TableSymbol.CalcType(!=, V.ht, H.tipo) } V1 { V.sp = V1.sp; V.sc = V1.sc; V.st = V1.st }
V -> <= H { V1.hp = criatemp(); V1.hc = V.hc || H.cod || gen(<=, V1.hp, V.hp, H.place);
			V1.ht = TableSymbol.CalcType(<=, V.ht, H.tipo) } V1 { V.sp = V1.sp; V.sc = V1.sc; V.st = V1.st }
V -> Ɛ { V.sp = V.hp; V.sc = V.hc; V.st = V.ht }

H -> J { X.hc = J.cod; X.hp = J.place; X.ht = J.tipo } X { H.cod = X.sc; H.place = X.sp; H.tipo = X.st }
X -> + J { X1.hp = criatemp(); X1.hc = X.hc || J.cod || gen(+, X1.hp, X.hp, J.place); 
			X1.ht = TableSymbol.CalcType(+, X.ht, J.tipo) } X1 { X.sp = X1.sp; X.sc = X1.sc; X.st = X1.st }
X -> - J { X1.hp = criatemp(); X1.hc = X.hc || J.cod || gen(-, X1.hp, X.hp, J.place); 
			X1.ht = TableSymbol.CalcType(-, X.ht, J.tipo) } X1 { X.sp = X1.sp; X.sc = X1.sc; X.st = X1.st }
X -> Ɛ { X.sp = X.hp; X.sc = X.hc; X.st = X.ht }

J -> K { Y.hc = K.cod; Y.hp = K.place; Y.ht = K.tipo } Y { J.cod = Y.sc; J.place = Y.sp; J.tipo = Y.st }
Y -> * K { Y1.hp = criatemp(); T1.hc = Y.hc || K.cod || gen(*, Y1.hp, Y.hp, K.place);
			Y1.ht = TableSymbol.CalcType(*, Y.ht, K.tipo) } Y1 { Y.sp = Y1.sp; Y.sc = Y1.sc; Y.st = Y1.st }
Y -> / K { Y1.hp = criatemp(); T1.hc = Y.hc || K.cod || gen(/, Y1.hp, Y.hp, K.place);
			Y1.ht = TableSymbol.CalcType(/, Y.ht, K.tipo) } Y1 { Y.sp = Y1.sp; Y.sc = Y1.sc; Y.st = Y1.st }
Y -> % K { Y1.hp = criatemp(); T1.hc = Y.hc || K.cod || gen(%, Y1.hp, Y.hp, K.place);
			Y1.ht = TableSymbol.CalcType(%, Y.ht, K.tipo) } Y1 { Y.sp = Y1.sp; Y.sc = Y1.sc; Y.st = Y1.st }
Y -> Ɛ { Y.sp = Y.hp; Y.sc = Y.hc; Y.st = Y.ht }

K ->
	id |       { TableSymbol.Exists(id.cod); K.place = TableSymbol.getId(id.cod, currentContext); K.cod = ""; K.tipo = TableSymbol.getType(id.cod) }
	(ExpAtrib) |    { K.place = ExpAtrib.place; K.cod = ExpAtrib.cod; K.tipo = ExpAtrib.tipo }
	cteint |   { K.place = criatemp(); K.cod = gen(=, K.place, cte.val); K.tipo = "int" }
	ctelong |  { K.place = criatemp(); K.cod = gen(=, K.place, cte.val); K.tipo = "long" }
	ctefloat | { K.place = criatemp(); K.cod = gen(=, K.place, cte.val); K.tipo = "float" }
	ctebool | { K.place = criatemp(); K.cod = gen(=, K.place, cte.val); K.tipo = "bool" }
    Funcao { K.cod = Funcao.cod }

	
If ->
	if ( { LIf = geralabel(); LElse = geralabel(); LFim = geralabel(); ExpCond.true = LIf; ExpCond.false = LElse } ExpCond ) 
		{{ { ListaComandos.LDesvioIni = If.LDesvioIni; ListaComandos.LDesvioFim = If.LDesvioFim } ListaComandos }}
			{ IfEnd.LElse = LElse; IfEnd.LFim = LFim; IfEnd.LDesvioIni = If.LDesvioIni; IfEnd.LDesvioFim = If.LDesvioFim } IfEnd { 
			If.cod = ExpCond.cod || gen(LIf, ':') || ListaComandos.cod || gen("goto", LFim) || IfEnd.cod || gen(LFim, ':') }
IfEnd ->
	else {{ { ListaComandos.LDesvioIni = IfEnd.LDesvioIni; ListaComandos.LDesvioFim = IfEnd.LDesvioFim } ListaComandos }} | 
		{ IfEnd.cod = gen(IfEnd.LElse, ':') || ListaComandos.cod }
	else If | { IfEnd.cod = gen(IfEnd.LElse, ':') || If.cod || gen("goto", IfEnd.LFim) }
	"" { IfEnd.cod = "" }

ExpCond -> { CR.htrue = ExpCond.true; Lb = geralabel(); CR.hfalse = Lb; CR.false = ExpCond.false; 
	CT.true = CR.htrue; CT.false = Lb } CT { CR.hc = CT.cod; CR.hp = CT.place; CR.Lb = Lb } CR { 
	ExpCond.cod = CR.sc; ExpCond.place = CR.sp; }
CR -> { CR1.htrue = CR.htrue; Lb = geralabel(); CR1.hfalse = Lb; CR1.false = CR.false; CR1.Lb = Lb;
	CT.true = CR.htrue; CT.false = Lb } || CT { CR1.hc = CR.hc || gen(CR.Lb, ':') || CT.cod; } CR1 { 
	CR.sc = CR1.sc; CR.sp = CR1.sp }
CR -> Ɛ { CR.sc = CR.hc; CR.sp = CR.hp; CR.sc += gen(CR.Lb, ':') || gen("goto", CR.false) }

CT -> { Lb = geralabel(); CU.htrue = Lb; CU.hfalse = CT.false; CU.true = CT.true; 
	CF.true = Lb; CF.false = CT.false } CF { CU.hc = CF.cod; CU.hp = CF.place; CU.Lb = Lb } CU {
	CT.cod = CU.sc; CT.place = CU.sp; }
CU -> { Lb = geralabel(); CU1.htrue = Lb; CU1.hfalse = CU.hfalse; CU1.true = CU.true; CU1.Lb = Lb;
	CF.true = Lb; CF.false = CU.hfalse } && CF { CU1.hc = CU.hc || gen(CU.Lb, ':') || CF.cod; } CU1 { 
	CU.sc = CU1.sc; CU.sp = CU1.sp }
CU -> Ɛ { CU.sc = CU.hc; CU.sp = CU.hp; CU.sc += gen(CU.Lb, ':') || gen("goto", CU.true) }

CF -> { CG.true = CF.true; CG.false = CF.false } CG { CF.cod = CG.cod; CF.place = CG.place }
CG -> ! { CG1.false = CG.true; CG1.true = CG.false } CG1 { CG.place = criatemp(); CG.cod = CG1.cod }

CG -> CH1 > CH2  { CG.place = criatemp(); CG.cod = CH1.cod || CH2.cod || gen(>, CG.place, CH1.place, CH2.place) 
	|| gen("if", CG.place, "!= 0 goto", CG.true) || gen("goto", CG.false); }
CG -> CH1 == CH2  { CG.place = criatemp(); CG.cod = CH1.cod || CH2.cod || gen(==, CG.place, CH1.place, CH2.place) 
	|| gen("if", CG.place, "!= 0 goto", CG.true) || gen("goto", CG.false); }
CG -> CH1 < CH2  { CG.place = criatemp(); CG.cod = CH1.cod || CH2.cod || gen(<, CG.place, CH1.place, CH2.place) 
	|| gen("if", CG.place, "!= 0 goto", CG.true) || gen("goto", CG.false); }
CG -> CH1 >= CH2  { CG.place = criatemp(); CG.cod = CH1.cod || CH2.cod || gen(>=, CG.place, CH1.place, CH2.place) 
	|| gen("if", CG.place, "!= 0 goto", CG.true) || gen("goto", CG.false); }
CG -> CH1 != CH2  { CG.place = criatemp(); CG.cod = CH1.cod || CH2.cod || gen(!=, CG.place, CH1.place, CH2.place) 
	|| gen("if", CG.place, "!= 0 goto", CG.true) || gen("goto", CG.false); }
CG -> CH1 <= CH2  { CG.place = criatemp(); CG.cod = CH1.cod || CH2.cod || gen(<=, CG.place, CH1.place, CH2.place) 
	|| gen("if", CG.place, "!= 0 goto", CG.true) || gen("goto", CG.false); }
CG -> { CH.true = CG.true; CH.false = CG.false } H { CG.cod = CH.cod; CG.place = CH.place }

CH -> { CJ.true = CH.true; CJ.false = CH.false } CJ { CX.hc = CJ.cod; CX.hp = CJ.place } CX { CH.cod = CX.sc; CH.place = CX.sp;
		if(CH.true != null && CX.hp != CX.sp) CH.cod += gen("if", CH.place, "!= 0 goto", CH.true) || gen("goto", CH.false); }
CX -> + CJ { CX1.hp = criatemp(); CX1.hc = CX.hc || CJ.cod || gen(+, CX1.hp, CX.hp, CJ.place); } CX1 { CX.sp = CX1.sp; CX.sc = CX1.sc }
CX -> - CJ { CX1.hp = criatemp(); CX1.hc = CX.hc || CJ.cod || gen(-, CX1.hp, CX.hp, CJ.place); } CX1 { CX.sp = CX1.sp; CX.sc = CX1.sc }
CX -> Ɛ { CX.sp = CX.hp; CX.sc = CX.hc }

CJ -> { CK.true = CJ.true; CK.false = CJ.false } CK { CY.hc = CK.cod; CY.hp = CK.place } CY { CJ.cod = CY.sc; CJ.place = CY.sp;
		if(CJ.true != null && CY.hp != CY.sp) CJ.cod += gen("if", CJ.place, "!= 0 goto", CJ.true) || gen("goto", CJ.false); }
CY -> * CK { CY1.hp = criatemp(); CY1.hc = CY.hc || CK.cod || gen(*, CY1.hp, CY.hp, CK.place) } CY1 { CY.sp = CY1.sp; CY.sc = CY1.sc }
CY -> / CK { CY1.hp = criatemp(); CY1.hc = CY.hc || CK.cod || gen(/, CY1.hp, CY.hp, CK.place) } CY1 { CY.sp = CY1.sp; CY.sc = CY1.sc }
CY -> % CK { CY1.hp = criatemp(); CY1.hc = CY.hc || CK.cod || gen(%, CY1.hp, CY.hp, CK.place) } CY1 { CY.sp = CY1.sp; CY.sc = CY1.sc }
CY -> Ɛ { CY.sp = CY.hp; CY.sc = CY.hc }

CK ->
	id |    { TableSymbol.Exists(id.cod); CK.place = TableSymbol.getId(id.cod, currentContext); CK.cod = ""; 
				if(CK.true != null && TableSymbol.getType(id.cod) == "bool") 
				CK.cod = gen("if", CK.place, "== true goto", CK.true) || gen("goto", CK.false); }
	(ExpCond) |   { CK.place = ExpCond.place; CK.cod = ExpCond.cod; ExpCond.true = CK.true; ExpCond.false = CK.false; }
	cteint | { CK.place = criatemp(); CK.cod = gen(=, CK.place, cte.val);
				if(CK.true != null) CK.cod = gen("if ", CK.place, "!= 0 goto", CK.true) || gen("goto", CK.false); }
	ctelong | { CK.place = criatemp(); CK.cod = gen(=, CK.place, cte.val);
				if(CK.true != null) CK.cod = gen("if ", CK.place, "!= 0 goto", CK.true) || gen("goto", CK.false); }
	ctefloat |{ CK.place = criatemp(); CK.cod = gen(=, CK.place, cte.val);
				if(CK.true != null) CK.cod = gen("if ", CK.place, "!= 0 goto", CK.true) || gen("goto", CK.false); }
	ctebool { if(CK.true != null){ if (cte.val == true) CK.cod = gen("goto", CK.true); else CK.cod = gen("goto", CK.false); } }

While ->
	while { LIni = geralabel(); LLoop = geralabel(); LFim = geralabel(); ExpCond.true = LIni; ExpCond.false = LFim } ( ExpCond ) 
		{{ { ComandosLoop.LIni = LLoop; ComandosLoop.LFim = LFim } ComandosLoop }} 
		{ While.cod = gen(LLoop, ':') || ExpCond.cod || gen(LIni, ':') || ComandosLoop.cod || gen("goto", LLoop) || gen(LFim, ':') }

DoWhile ->
	do {{ { LIni = geralabel(); LFim = geralabel(); ComandosLoop.LIni = LIni; ComandosLoop.LFim = LFim } ComandosLoop }} while 
		( { ExpCond.true = LIni; ExpCond.false = LFim } ExpCond ); 
		{ DoWhile.cod = gen(LIni, ':') || ComandosLoop.cod || ExpCond.cod || gen(LFim, ':') }

For ->
	for { LIni = geralabel(); LLoop = geralabel(); LFim = geralabel(); ExpCond.true = LIni; ExpCond.false = LFim } ( ListaAtrib1; ExpCond; ListaAtrib2 ) 
		{{ { ComandosLoop.LIni = LLoop; ComandosLoop.LFim = LFim } ComandosLoop }}
		{ For.cod = ListaAtrib1.cod || gen(LLoop, ':') || ExpCond.cod || gen(LIni, ':') || 
			ComandosLoop.cod || ListaAtrib2.cod || gen("goto", LLoop) || gen(LFim, ':') }
ListaAtrib ->
	Atribuicao ListaAtribA { ListaAtrib.cod = Atribuicao.cod || ListaAtribA.cod }
ListaAtribA ->
	, Atribuicao ListaAtribA | { ListaAtribA.cod = gen(',') || Atribuicao.cod || ListaAtribA.cod }
	"" { ListaAtribA.cod = "" }

ComandosLoop ->
	{ ListaComandos.LDesvioIni = ComandosLoop.LIni; ListaComandos.LDesvioFim = ComandosLoop.LFim } ListaComandos | 
		{ ComandosLoop.cod = ListaComandos.cod }
	ComandosLoop1 { ComandosLoop.cod = ComandosLoop1.cod }

ComandosLoopDesvio ->
	break; | { if(ComandosLoopDesvio.LFim != null) ComandosLoopDesvio.cod = gen("goto", ComandosLoopDesvio.LFim) }
	continue; | { if(ComandosLoopDesvio.LIni != null) ComandosLoopDesvio.cod = gen("goto", ComandosLoopDesvio.LIni) }
	"" { ComandosLoopDesvio.cod = "" }


// Duvidas
-verificar tipo e numero de parametros

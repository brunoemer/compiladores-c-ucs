ProgArduino -> 
	{ currentContext = GlobalContext } ListaProg

ListaProg ->
	ListaComandosGlobal
	
ListaComandosGlobal ->
	Declaracao |
	If |
	While |
	DoWhile |
	For |
	Switch |
	Atribuicao |
	Funcao |
	ListaComandosGlobal

ListaComandos ->
	DeclaraVar |
	If |
	While |
	DoWhile |
	For |
	Switch |
	Atribuicao |
	Funcao |
	ListaComandos1

Declaracao -> 
	TipoVar id { DecB.tipo = TipoVar.tipo; DecB.idCod = id.cod; } DecB | 
	void id ( { TableSymbol.add(id.cod, id.tipo, StructureType.Function); currentContext = id.cod } DecC
DecB -> 
	; { TableSymbol.add(DecB.idCod, DecB.tipo) } | 
	, { TableSymbol.add(DecB.idCod, DecB.tipo) } id { ListaVar.tipo = DecB.tipo; TableSymbol.add(id.cod, DecB.tipo) } ListaVar | 
	( { TableSymbol.add(DecB.idCod, DecB.tipo, StructureType.Function); currentContext = DecB.idCod } DecC
DecC -> 
	ListaDecParm) {{ ListaComandos Retorno }} { currentContext = GlobalContext }
Retorno -> 
	return Exp ; | 
	""

ListaDecParm -> 
	TipoVar id { TableSymbol.add(id.cod, TipoVar.tipo, currentContext) } ListaDecParmB | 
	""
ListaDecParmB -> 
	, TipoVar id { TableSymbol.add(id.cod, TipoVar.tipo, currentContext) } ListaDecParmB1 | 
	""

ListaVar -> 
	, id { ListaVar1.tipo = TipoVar.tipo; TableSymbol.add(id.cod, ListaVar.tipo, currentContext) } ListaVar1 |
	""

DeclaraVar ->
	TipoVar id { ListaVar.tipo = TipoVar.tipo; TableSymbol.add(id.cod, ListaVar.tipo, currentContext) } ListaVar;

TipoVar ->
	int | { TipoVar.tipo = "int" }
	long | { TipoVar.tipo = "long" }
	float | { TipoVar.tipo = "float" }
	bool | { TipoVar.tipo = "bool" }
	byte //REMOVER

Atribuicao -> 
	id { TableSymbol.ExistsVar(id.cod); AtribOp.id = id.cod } AtribOp { Atribuicao.cod = AtribOp.cod }
AtribOp ->
	= Exp  | { AtribOp.cod = Exp.cod || gen(=, AtribOp.id, Exp.place) }
	+= Exp | { AtribOp.place = criatemp(); AtribOp.cod = Exp.cod || 
				gen(+, AtribOp.place, AtribOp.id, Exp.place) || gen(=, AtribOp.id, AtribOp.place) }
	-= Exp | { AtribOp.place = criatemp(); AtribOp.cod = Exp.cod || 
				gen(-, AtribOp.place, AtribOp.id, Exp.place) || gen(=, AtribOp.id, AtribOp.place) }
	*= Exp | { AtribOp.place = criatemp(); AtribOp.cod = Exp.cod || 
				gen(*, AtribOp.place, AtribOp.id, Exp.place) || gen(=, AtribOp.id, AtribOp.place) }
	/= Exp   { AtribOp.place = criatemp(); AtribOp.cod = Exp.cod || 
				gen(/, AtribOp.place, AtribOp.id, Exp.place) || gen(=, AtribOp.id, AtribOp.place) }

Exp -> T { R.hc = T.cod; R.hp = T.place; R.ht = T.tipo } R { Exp.cod = R.sc; Exp.place = R.sp; Exp.tipo = R.st }
R -> || T { R1.hp = criatemp(); R1.hc = R.hc || T.cod || gen(||, R1.hp, R.hp, T.place);
			R1.ht = TableSymbol.CalcType(||, R.ht, T.tipo) } R1 { R.sp = R1.sp; R.sc = R1.sc; R.st = R1.st }
R -> Ɛ { R.sp = R.hp; R.sc = R.hc; R.st = R.ht }

T -> F { U.hc = F.cod; U.hp = F.place; U.ht = F.tipo } U { T.cod = U.sc; T.place = U.sp; T.tipo = U.st }
U -> && F { U1.hp = criatemp(); U1.hc = U.hc || F.cod || gen(&&, U1.hp, U.hp, F.place);
			U1.ht = TableSymbol.CalcType(&&, U.ht, F.tipo) } U1 { U.sp = U1.sp; U.sc = U1.sc; U.st = U1.st }
U -> Ɛ { U.sp = U.hp; U.sc = U.hc; U.st = U.ht }

F -> G { F.cod = G.cod; F.place = G.place; F.tipo = G.tipo }
G -> !G1 { G.place = criatemp(); G.cod = G1.cod || gen(!, G.place, G1.place); G.tipo = G1.tipo }

G -> H { V.hc = H.cod; V.hp = H.place; V.ht = H.tipo } V { G.cod = V.sc; G.place = V.sp; G.tipo = V.st }
V -> > H { V1.hp = criatemp(); V1.hc = V.hc || H.cod || gen(>, V1.hp, V.hp, H.place);
			V1.ht = TableSymbol.CalcType(>, V.ht, H.tipo) } V1 { V.sp = V1.sp; V.sc = V1.sc; V.st = V1.st }
V -> == H { V1.hp = criatemp(); V1.hc = V.hc || H.cod || gen(==, V1.hp, V.hp, H.place);
			V1.ht = TableSymbol.CalcType(==, V.ht, H.tipo) } V1 { V.sp = V1.sp; V.sc = V1.sc; V.st = V1.st }
V -> < H { V1.hp = criatemp(); V1.hc = V.hc || H.cod || gen(<, V1.hp, V.hp, H.place);
			V1.ht = TableSymbol.CalcType(<, V.ht, H.tipo) } V1 { V.sp = V1.sp; V.sc = V1.sc; V.st = V1.st }
V -> >= H { V1.hp = criatemp(); V1.hc = V.hc || H.cod || gen(>=, V1.hp, V.hp, H.place);
			V1.ht = TableSymbol.CalcType(>=, V.ht, H.tipo) } V1 { V.sp = V1.sp; V.sc = V1.sc; V.st = V1.st }
V -> != H { V1.hp = criatemp(); V1.hc = V.hc || H.cod || gen(!=, V1.hp, V.hp, H.place);
			V1.ht = TableSymbol.CalcType(!=, V.ht, H.tipo) } V1 { V.sp = V1.sp; V.sc = V1.sc; V.st = V1.st }
V -> <= H { V1.hp = criatemp(); V1.hc = V.hc || H.cod || gen(<=, V1.hp, V.hp, H.place);
			V1.ht = TableSymbol.CalcType(<=, V.ht, H.tipo) } V1 { V.sp = V1.sp; V.sc = V1.sc; V.st = V1.st }
V -> Ɛ { V.sp = V.hp; V.sc = V.hc; V.st = V.ht }

H -> J { X.hc = J.cod; X.hp = J.place; X.ht = J.tipo } X { H.cod = X.sc; H.place = X.sp; H.tipo = X.st }
X -> + J { X1.hp = criatemp(); X1.hc = X.hc || J.cod || gen(+, X1.hp, X.hp, J.place); 
			X1.ht = TableSymbol.CalcType(+, X.ht, J.tipo) } X1 { X.sp = X1.sp; X.sc = X1.sc; X.st = X1.st }
X -> - J { X1.hp = criatemp(); X1.hc = X.hc || J.cod || gen(-, X1.hp, X.hp, J.place); 
			X1.ht = TableSymbol.CalcType(-, X.ht, J.tipo) } X1 { X.sp = X1.sp; X.sc = X1.sc; X.st = X1.st }
X -> Ɛ { X.sp = X.hp; X.sc = X.hc; X.st = X.ht }

J -> K { Y.hc = K.cod; Y.hp = K.place; Y.ht = K.tipo } Y { J.cod = Y.sc; J.place = Y.sp; J.tipo = Y.st }
Y -> * K { Y1.hp = criatemp(); T1.hc = Y.hc || K.cod || gen(*, Y1.hp, Y.hp, K.place);
			Y1.ht = TableSymbol.CalcType(*, Y.ht, K.tipo) } Y1 { Y.sp = Y1.sp; Y.sc = Y1.sc; Y.st = Y1.st }
Y -> / K { Y1.hp = criatemp(); T1.hc = Y.hc || K.cod || gen(/, Y1.hp, Y.hp, K.place);
			Y1.ht = TableSymbol.CalcType(/, Y.ht, K.tipo) } Y1 { Y.sp = Y1.sp; Y.sc = Y1.sc; Y.st = Y1.st }
Y -> % K { Y1.hp = criatemp(); T1.hc = Y.hc || K.cod || gen(%, Y1.hp, Y.hp, K.place);
			Y1.ht = TableSymbol.CalcType(%, Y.ht, K.tipo) } Y1 { Y.sp = Y1.sp; Y.sc = Y1.sc; Y.st = Y1.st }
Y -> Ɛ { Y.sp = Y.hp; Y.sc = Y.hc; Y.st = Y.ht }

K ->
	id |       { K.place = id.cod; K.cod = ""; TableSymbol.Exists(id.cod); K.tipo = TableSymbol.getType(id.cod) }
	(Exp) |    { K.place = Exp.place; K.cod = Exp.cod; K.tipo = Exp.tipo }
	cteint |   { K.place = criatemp(); K.cod = gen(=, K.place, cte.val); K.tipo = "int" }
	ctelong |  { K.place = criatemp(); K.cod = gen(=, K.place, cte.val); K.tipo = "long" }
	ctefloat | { K.place = criatemp(); K.cod = gen(=, K.place, cte.val); K.tipo = "float" }
	ctebool | { K.place = criatemp(); K.cod = gen(=, K.place, cte.val); K.tipo = "bool" }
	byte | //REMOVER
    Funcao

If ->
	if ( Exp ) {{ ListaComandos }} IfEnd
IfEnd ->
	else {{ ListaComandos }} |
	else If |
	""
	
// Falta adicionar break e continue
While ->
	while ( Exp ) {{ ListaComandos }}

DoWhile ->
	do {{ ListaComandos }} while ( Exp );

For ->
	for ( ListaAtrib; Exp; ListaAtrib ) {{ ListaComandos }}
ListaAtrib ->
	Atribuicao ListaAtribA
ListaAtribA ->
	, Atribuicao ListaAtribA |
	""

Funcao ->
	id ( { TableSymbol.ExistsFunction(id.cod) } ListaParam );
	id.id ( ListaParam  ); // REMOVER?
ListaParam -> 
	Exp ListaParamRec | 
	""
ListaParamRec -> 
	, Exp ListaParamRec | 
	""
	
//REMOVER
Switch ->
	switch ( Exp ) {{ ListaCase SwitchDefault }}
ListaCase ->
	case const_int : {{ ListaComandos CaseEnd |
	ListaCase |
	""
CaseEnd ->
	}} break; |
	}}
SwitchDefault ->
	default: {{ ListaComandos CaseEnd |
	""

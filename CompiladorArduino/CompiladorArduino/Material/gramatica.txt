ProgArduino -> 
	ListaProg

ListaProg ->
	ListaComandosX
	
ListaComandosX ->
	Declaracao |
	If |
	While |
	DoWhile |
	For |
	Switch |
	Atribuicao |
	Funcao |
	ListaComandosX

ListaComandos ->
	DeclaraVar | { currentContext = ListaComandos.context }
	If |
	While |
	DoWhile |
	For |
	Switch |
	Atribuicao |
	Funcao |
	ListaComandos1 { ListaComandos1.context = ListaComandos.context }

Declaracao -> 
	TipoVar id { DecB.tipo = TipoVar.tipo; TableSymbol.add(id.cod, TipoVar.tipo); DecB.context = id.cod; } DecB | 
	void id ( { DecC.context = id.cod } DecC
DecB -> 
	; | 
	, id { ListaVar.tipo = DecB.tipo; TableSymbol.add(id.cod, DecB.tipo) } ListaVar | 
	( { DecC.context = DecB.context } DecC
DecC -> 
	{ ListaDecParm.context = DecC.context } ListaDecParm) {{ { ListaComandos.context = DecC.context } ListaComandos Retorno }}
Retorno -> 
	return Exp ; | 
	""

ListaDecParm -> 
	TipoVar id { ListaDecParmB.context = ListaDecParm.context; TableSymbol.add(id.cod, TipoVar.tipo, ListaDecParm.context) } ListaDecParmB | 
	""
ListaDecParmB -> 
	, TipoVar id { ListaDecParmB1.context = ListaDecParmB.context; TableSymbol.add(id.cod, TipoVar.tipo, ListaDecParmB.context) } ListaDecParmB1 | 
	""

ListaVar -> 
	, id { ListaVar1.tipo = TipoVar.tipo; TableSymbol.add(id.cod, ListaVar.tipo, currentContext) } ListaVar1 |
	""

DeclaraVar ->
	TipoVar id { ListaVar.tipo = TipoVar.tipo; TableSymbol.add(id.cod, ListaVar.tipo, currentContext) } ListaVar;

TipoVar ->
	int | { TipoVar.tipo = "int" }
	long | { TipoVar.tipo = "long" }
	float | { TipoVar.tipo = "float" }
	byte //REMOVER

Atribuicao -> 
	id = Exp { Atribuicao.cod = Exp.cod + gen(=, id.cod, Exp.place) }

Exp -> T R
R -> || T R1
R -> Ɛ

T -> F U
U -> && F U1
U -> Ɛ

F -> G

G -> ~G //alterar F -> ~G
G -> H V

V -> > H V1
V -> == H V1
V -> < H V1
V -> >= H V1
V -> != H V1
V -> <= H V1
V -> Ɛ

H -> J X
X -> + J X1
X -> - J X1
X -> Ɛ

J -> K Y
Y -> * K Y1
Y -> / K Y1
Y -> % K Y1
Y -> Ɛ

K ->
	id |
	(Exp) |
	int |
	long |
	byte | //REMOVER
	float |
	funcao()

If ->
	if ( Exp ) {{ ListaComandos }} IfEnd
IfEnd ->
	else {{ ListaComandos }} |
	else If |
	""
	
While ->
	while ( Exp ) {{ ListaComandos }}

DoWhile ->
	do {{ ListaComandos }} while ( Exp );

For ->
	for ( ListaAtrib; Exp; ListaAtrib ) {{ ListaComandos }}
ListaAtrib ->
	Atribuicao ListaAtribA
ListaAtribA ->
	, Atribuicao ListaAtribA |
	""

Funcao ->
	id ( ListaParam );
	id.id ( ListaParam  );
ListaParam -> 
	Exp ListaParamRec | 
	""
ListaParamRec -> 
	, Exp ListaParamRec | 
	""
	
//REMOVER
Switch ->
	switch ( Exp ) {{ ListaCase SwitchDefault }}
ListaCase ->
	case const_int : {{ ListaComandos CaseEnd |
	ListaCase |
	""
CaseEnd ->
	}} break; |
	}}
SwitchDefault ->
	default: {{ ListaComandos CaseEnd |
	""

If ->
	if ( { LIni = geralabel(); LElse = geralabel(); LFim = geralabel(); E.true = LIf; E.false = LElse } E ) {{ {gen(LIf, ':')} ListaComandos }} {IfEnd.Lelse = Lelse} IfEnd
IfEnd ->
	else {gen(IfEnd.Lelse, ':')} {{ ListaComandos }} |
	else {gen(IfEnd.Lelse, ':')} If |
	""

Atribuicao -> 
	id = E { Atribuicao.cod = E.cod + gen(=, id.cod, E.place) }

E -> { E1.true = E.true; Lb = geralabel(); E1.false = Lb } E1 {gen(if E1.place!=0 goto E1.true)????} || { T.true = E.true; T.false = E.false } T {
		E.cod = E1.cod || gen(Lb, ':') || T.cod; E.tipo = TableSymbol.CalcType(||, E1.tipo, T.tipo) }
E -> { T.true = E.true; T.false = E.false } T { E.cod = T.cod; E.place = T.place; E.tipo = T.tipo }
-- 1*1||true???? teria um goto na *

T -> { T1.false = T.false; Lb = geralabel(); T1.true = Lb } T1 && { F.true = T.true; F.false = T.false } F { 
		T.cod = T1.cod || gen(Lb, ':') || F.cod; T.tipo = TableSymbol.CalcType(&&, T1.tipo, F.tipo) }
T -> { F.true = T.true; F.false = T.false } F { T.cod = F.cod; T.place = F.place; T.tipo = F.tipo }

F -> { G.true = F.true; G.false = F.false } G { F.cod = G.cod; F.place = G.place; F.tipo = G.tipo }
G -> ! { G1.false = G.true; G1.true = G.false } G1 { G.place = criatemp(); G.cod = G1.cod || gen(!, G.place, G1.place); G.tipo = G1.tipo }

G -> G1 > H  { G.place = criatemp(); 
	G.cod = G1.cod || H.cod || gen(>, G.place, G1.place, H.place) 
		|| gen("if", G.place, "!= 0 goto", G.true) || gen("goto", E.false)????; 
	G.tipo = TableSymbol.CalcType(>, G1.tipo, H.tipo) }
G -> G1 == H { G.place = criatemp(); G.cod = G1.cod || H.cod || gen(==, G.place, G1.place, H.place); G.tipo = TableSymbol.CalcType(==, G1.tipo, H.tipo) }
G -> G1 < H  { G.place = criatemp(); G.cod = G1.cod || H.cod || gen(<, G.place, G1.place, H.place); G.tipo = TableSymbol.CalcType(<, G1.tipo, H.tipo) }
G -> G1 >= H { G.place = criatemp(); G.cod = G1.cod || H.cod || gen(>=, G.place, G1.place, H.place); G.tipo = TableSymbol.CalcType(>=, G1.tipo, H.tipo) }
G -> G1 != H { G.place = criatemp(); G.cod = G1.cod || H.cod || gen(!=, G.place, G1.place, H.place); G.tipo = TableSymbol.CalcType(!=, G1.tipo, H.tipo) }
G -> G1 <= H { G.place = criatemp(); G.cod = G1.cod || H.cod || gen(<=, G.place, G1.place, H.place); G.tipo = TableSymbol.CalcType(<=, G1.tipo, H.tipo) }
G -> H { G.cod = H.cod; G.place = H.place; G.tipo = H.tipo }

H -> H1 + J { H.place = criatemp(); H.cod = H1.cod || J.cod || gen(+, H.place, H1.place, J.place); H.tipo = TableSymbol.CalcType(+, H1.tipo, J.tipo) }
H -> H1 - J { H.place = criatemp(); H.cod = H1.cod || J.cod || gen(-, H.place, H1.place, J.place); H.tipo = TableSymbol.CalcType(-, H1.tipo, J.tipo) }
H -> J { H.cod = J.cod; H.place = J.place; H.tipo = J.tipo }

J -> {J1.true=J.true;K.true=J.true????} J1 * K { J.place = criatemp(); J.cod = J1.cod || K.cod || gen(*, J.place, J1.place, K.place); J.tipo = TableSymbol.CalcType(*, J1.tipo, K.tipo) }
J -> J1 / K { J.place = criatemp(); J.cod = J1.cod || K.cod || gen(/, J.place, J1.place, K.place); J.tipo = TableSymbol.CalcType(/, J1.tipo, K.tipo) }
J -> J1 % K { J.place = criatemp(); J.cod = J1.cod || K.cod || gen(%, J.place, J1.place, K.place); J.tipo = TableSymbol.CalcType(%, J1.tipo, K.tipo) }
J -> {K.true = J.true; K.false = J.false????} K { J.cod = K.cod; J.place = K.place; J.tipo = K.tipo }

K ->
	id |       { K.place = id.cod; K.cod = ""; TableSymbol.Exists(id.cod); K.tipo = TableSymbol.getType(id.cod) }
	(E) |      { K.place = E.place; K.cod = E.cod; K.tipo = E.tipo }
	cteint |   { K.place = criatemp(); K.cod = gen(=, K.place, cte.val); K.tipo = "int" }
	ctelong |  { K.place = criatemp(); K.cod = gen(=, K.place, cte.val); K.tipo = "long" }
	ctefloat | { K.place = criatemp(); K.cod = gen(=, K.place, cte.val); K.tipo = "float" }
	ctebool | { K.place = criatemp(); K.cod = gen(=, K.place, cte.val); K.tipo = "bool";
				if (K.true != null) {
					if (cte.val == true) K.cod = gen("goto", K.true); else K.cod = gen("goto", K.false);
				}????
			}
	Funcao


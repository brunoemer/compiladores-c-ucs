Atribuicao -> 
	id = E { Atribuicao.cod = E.cod + gen(=, id.cod, E.place) }

E -> E1 || T { E.place = criatemp(); E.cod = E1.cod || T.cod || gen(||, E.place, E1.place, T.place); E.tipo = TableSymbol.CalcType(E1.tipo, T.tipo, ||) }
E -> T { E.cod = T.cod; E.place = T.place; E.tipo = T.tipo }

T -> T1 && F { T.place = criatemp(); T.cod = T1.cod || F.cod || gen(&&, T.place, T1.place, F.place); T.tipo = TableSymbol.CalcType(T1.tipo, F.tipo, &&) }
T -> F { T.cod = F.cod; T.place = F.place; T.tipo = F.tipo }

F -> G { F.cod = G.cod; F.place = G.place; F.tipo = G.tipo }
G -> !G1 { G.place = criatemp(); G.cod = G1.cod || gen(!, G.place, G1.place); G.tipo = G1.tipo }

G -> G1 > H  { G.place = criatemp(); G.cod = G1.cod || H.cod || gen(>, G.place, G1.place, H.place); G.tipo = TableSymbol.CalcType(G1.tipo, H.tipo, >) }
G -> G1 == H { G.place = criatemp(); G.cod = G1.cod || H.cod || gen(==, G.place, G1.place, H.place); G.tipo = TableSymbol.CalcType(G1.tipo, H.tipo, ==) }
G -> G1 < H  { G.place = criatemp(); G.cod = G1.cod || H.cod || gen(<, G.place, G1.place, H.place); G.tipo = TableSymbol.CalcType(G1.tipo, H.tipo, <) }
G -> G1 >= H { G.place = criatemp(); G.cod = G1.cod || H.cod || gen(>=, G.place, G1.place, H.place); G.tipo = TableSymbol.CalcType(G1.tipo, H.tipo, >=) }
G -> G1 != H { G.place = criatemp(); G.cod = G1.cod || H.cod || gen(!=, G.place, G1.place, H.place); G.tipo = TableSymbol.CalcType(G1.tipo, H.tipo, !=) }
G -> G1 <= H { G.place = criatemp(); G.cod = G1.cod || H.cod || gen(<=, G.place, G1.place, H.place); G.tipo = TableSymbol.CalcType(G1.tipo, H.tipo, <=) }
G -> H { G.cod = H.cod; G.place = H.place; G.tipo = H.tipo }

H -> H1 + J { H.place = criatemp(); H.cod = H1.cod || J.cod || gen(+, H.place, H1.place, J.place); H.tipo = TableSymbol.CalcType(H1.tipo, J.tipo, +) }
H -> H1 - J { H.place = criatemp(); H.cod = H1.cod || J.cod || gen(-, H.place, H1.place, J.place); H.tipo = TableSymbol.CalcType(H1.tipo, J.tipo, -) }
H -> J { H.cod = J.cod; H.place = J.place; H.tipo = J.tipo }

J -> J1 * K { J.place = criatemp(); J.cod = J1.cod || K.cod || gen(*, J.place, J1.place, K.place); J.tipo = TableSymbol.CalcType(J1.tipo, K.tipo, *) }
J -> J1 / K { J.place = criatemp(); J.cod = J1.cod || K.cod || gen(/, J.place, J1.place, K.place); J.tipo = TableSymbol.CalcType(J1.tipo, K.tipo, /) }
J -> J1 % K { J.place = criatemp(); J.cod = J1.cod || K.cod || gen(%, J.place, J1.place, K.place); J.tipo = TableSymbol.CalcType(J1.tipo, K.tipo, %) }
J -> K { J.cod = K.cod; J.place = K.place; J.tipo = K.tipo }

K ->
	id |       { K.place = id.cod; K.cod = ""; K.tipo = TableSymbol.getType(id.cod) }
	(E) |      { K.place = E.place; K.cod = E.cod; K.tipo = E.tipo }
	cteint |   { K.place = criatemp(); K.cod = gen(=, K.place, cte.val); K.tipo = "int" }
	ctelong |  { K.place = criatemp(); K.cod = gen(=, K.place, cte.val); K.tipo = "long" }
	ctefloat | { K.place = criatemp(); K.cod = gen(=, K.place, cte.val); K.tipo = "float" }
	cteboolean | { K.place = criatemp(); K.cod = gen(=, K.place, cte.val); K.tipo = "boolean" }
	funcao()
